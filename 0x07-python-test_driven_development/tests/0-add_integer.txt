================================
:::Using the 0-add_integer.py:::
================================

The 0-add_integer.py module has only one function::
```
add_integer(a, b=98)
```

:::How to Use:::
================
add_integer(a, b=98) adds two integers supplied to the function. It accepts at most 2 arguments and at least 1 argument for ```a`` where in such case ```b``` is taken as given as 98::(see function above)

:::Tests:::
===========

Import function from the module:

	>>> add_integer = __import__('0-add_integer').add_integer

	
Test positive integers:
	>>> add_integer(4, 5)
	9

Test negative integers:
	>>> add_integer(-4, -5)
	-9

Test floats:
	>>> add_integer(-4.444, -1.3)
	-5

Test b argument in range:
	[add_integer(5, b) for b in range(5)]
	[5, 6, 7, 8, 9]

Test long int:
	>>> add_integer(999999999999999999999999999999999, 1222222222222222222222222)
	1000000001222222222222222222222221

Test string:
	>>> add_integer(1, '123')
	Traceback (most recent call last):
	  ...
	TypeError: b must be an integer

Test float coversion for a int string:
	>>> add_integer(1, float('123'))
	124

Test undefined ``b`` variable:
	>>> add_integer(1, c)
	Traceback (most recent call last):
	  ...
	NameError: name 'c' is not defined

Test undefined ``a`` variable:
	>>> add_integer(a, 3)
	Traceback (most recent call last):
	  ...
	NameError: name 'a' is not defined

Test Bool as argument:
	>>> add_integer(True, 3)
	Traceback (most recent call last):
	  ...
	TypeError: a must be an integer

Test empty arguments list:
	>>> add_integer()
	Traceback (most recent call last):
	  ...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Test single argument(``b`` is given in the function as 98):
	>>> add_integer(1)
	99

Test three arguments:
	>>> add_integer(1,2,3)
	Traceback (most recent call last):
	  ...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
